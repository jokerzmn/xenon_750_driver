#
# For reading this config file libconfig library was used: https://github.com/hyperrealm/libconfig.
# You can change syntax of settings, groups and lists however you like, but remember
# that some settings must be inside certain groups, etc..
#
# Example for macro:
# "entries" list must be inside "macro" group and "delay" setting must be
# inside one of the groups inside the "entries" list.
#
# macro = {
#	...
#	entries = (
#		{
#			...
#			delay = x;
#		}
#	);
# };

# If any config setting is missing, it will be set to default.
#

# USB polling rate.
#
# Mouse supports 4 usb polling rates. To set polling rate use one of the codes:
# - 125Hz  = 1,
# - 250Hz  = 2,
# - 500Hz  = 3,
# - 1000Hz = 4.
#
# Example:
# set usb polling rate to 250Hz.
# poll_rate = 2;
#
poll_rate = 4;

# DPI modes.
#
# Mouse has up to 6 DPI modes and for each of them you can change DPI, color and activity.
#
# Each DPI mode entry has up to 4 settings:
# - mode = for which DPI mode should the rest of the settings in the entry be applied,
# - active = make DPI mode active or inactive:
# 		- active = 1 (default active),
# 		- active = 0 (inactive),
# - color = color of logo and scroll wheel on the mouse. To set one of the colors we need to use
# 	color codes:
# 		- off 		= 0,
# 		- red 		= 1,
# 		- green 	= 2,
# 		- blue 		= 3,
# 		- cyan 		= 4,
# 		- yellow 	= 5,
# 		- magenta 	= 6,
# 		- white 	= 7.
#
# - dpi = DPI of mouse (ranges between 100 and 7400). Mouse only stores thousandth and
# 	hundredth part of the DPI value in its memory, so when we set DPI to 1382 mouse
# 	would only store 13 in memory, which would result in a DPI of 1300.
#
# Examples of DPI mode entries.
# Example 1:
# set color to green and DPI to 5100 for 5th DPI mode. For rest of the DPI modes set
# settings to default.
#
# dpi_modes = ({
#	mode = 5;
#	color = 2;
#	dpi = 5100;
# });
#
# Example 2:
# set color to blue and DPI to 300 for 1st DPI mode,
# set color to red and DPI to 3400 for 2nd DPI mode,
# turn off rest of the DPI modes.
# dpi_modes = (
#	{
#		mode = 1;
#		color = 3;
#		dpi = 300;
#	},
#	{
#		mode = 2;
#		color = 1;
#		dpi = 3400;
#	},
#	{ mode = 3; active = 0; },
#	{ mode = 4; active = 0; },
#	{ mode = 5; active = 0; },
#	{ mode = 6; active = 0; }
# );
#
dpi_modes = (
	{
		mode = 1;
		active = 1;
		color = 7;
		dpi = 1200;
	},
	{
		mode = 2;
		active = 1;
		color = 4;
		dpi = 1600;
	},
	{
		mode = 3;
		active = 1;
		color = 2;
		dpi = 2400;
	},
	{
		mode = 4;
		active = 1;
		color = 6;
		dpi = 4400;
	},
	{
		mode = 5;
		active = 1;
		color = 3;
		dpi = 6200;
	},
	{
		mode = 6;
		active = 1;
		color = 1;
		dpi = 7400;
	}
);

# Buttons functionalities.
#
# For each mouse button you can change its functionality. For example, you can
# set a macro to activate on the middle button press.
#
# buttons_functionalities entry settings:
# - name = name of the button whose functionality you want to change,
# 	list of the buttons:
# 		- "left_btn",
# 		- "right_btn",
# 		- "middle_btn",
# 		- "back_btn" 	(button on the left side of the mouse, closer to the user),
# 		- "forward_btn" (the other button on the left side),
# 		- "dpi_p_btn" 	(button on the top, closer to the scroll wheel),
# 		- "dpi_n_btn" 	(the other button on the top),
#
# - fun = name of functionality,
# - arg1, arg2 and arg3 = some functionalities require arguments.
#
# 	Example: 
# 	pass 2 arguments, where argument 1 is 17 and argument 2 is 29.
# 	{
# 		name = "some_btn";
# 		fun = "some_fun";
# 		arg1 = 17; 
# 		arg2 = 29; 
# 	}
#
# Available functionalities with arguments:
# - "left_btn",
# - "right_btn",
# - "middle_btn",
# - "back_btn",
# - "forward_btn",
# - "dpi_p_btn" (if DPI mode < 6, then increment DPI mode by 1),
# - "dpi_n_btn" (if DPI mode > 1, then decrement DPI mode by 1),
# - "dpi_loop" (increment DPI mode by 1 and when on 6th DPI mode go back to 1st DPI mode),
# - "dpi_lock" (Takes 1 argument. When holding the button, change DPI to value passed in the argument:
# 		arg1 = 0x81; (for DPI 100),
# 		arg1 = 0x82; (for DPI 200),
# 		...
# 		arg1 = 0x8A; (for DPI 1000),
# 		arg2 = 0x8B; (for DPI 1100)),
#
# - "three_click" (call "left_btn" functionality 3 times),
# - "fire_key" (fire functionality or a keyboard character x times and with y interval
# 	between calls. Takes 3 arguments:
# 	- arg1 = functionality to call. Instead of a functionality you can also use any keyboard character,
# 	- arg2 = interval between functionality calls,
# 	- arg3 = how many times to repeat the functionality.
#	
#	Arg1 functionality must be passed with use of functionality codes or key codes (for a keyboard character)
#	specified in functionality_codes and key_codes respectively.
#	Arg2 interval must be between 5 and 255 (ms).
#	Arg3 repeat number must be between 1 and 255.
#
#	Example:
#	change functionality of the middle button to fire "A" character 10 times with interval of 100ms.
#	{
#		name = "middle_btn";
#		fun = "fire_key";
#		arg1 = 0x04;
#		arg2 = 100;
#		arg3 = 10;
#	}
#	),
#
# - "key_combination" (combine special keys (example: left shift) with up to 2 keyboard characters. Takes 2 or 3 arguments:
# 	- arg1 = special key code from special_key_codes file,
# 	- arg2 = keyboard character from key_codes file,
# 	- arg3 (optional) = keyboard character from key_codes file.
#
# 	Example:
# 	Combine left shift with "1" character on the middle button press.
# 	{
#		name = "middle_btn",
#		fun = "key_combination";
#		arg1 = 0x02;
#		arg2 = 0x1E;
# 	}
# 	),
#
# - "macro" (activate macro which is inside of macro group. Takes 1 argument:
# 	arg1 = 0x11 (repeat macro specified amount of times (inside macro group in num_of_cycles setting)),
# 	arg1 = 0x12 (repeat macro until any button on mouse is pressed),
# 	arg1 = 0x14 (repeat macro until the mouse button is released).
#	
#	Example:
#	Activate macro and repeat it until the middle button is released.
#	{
#		name = "middle_btn";
#		fun = "macro";
#		arg1 = 0x14;
#	}
# 	),
#
# - "disable" (disable button functionality).
#
buttons_functionalities = (
	{
		name = "left_btn";
		fun = "left_btn";
	},
	{
		name = "right_btn";
		fun = "right_btn";
	},
	{
		name = "middle_btn";
		fun = "middle_btn";
	},
	{
		name = "back_btn";
		fun = "back_btn";
	},
	{
		name = "forward_btn";
		fun = "forward_btn";
	},
	{
		name = "dpi_p_btn";
		fun = "dpi_p_btn";
	},
	{
		name = "dpi_n_btn";
		fun = "dpi_n_btn";
	}
);

# Macro
#
# Order of macro entries matter. Macro in mouse memory will be ordered with respect to the
# order of macro entries.
# To specify how many times to repeat macro set value of num_of_cycles setting between
# 1 and 65535.
#
# Macro entries must be inside entries list.
#
# To add a new macro entry we need to specify: 
# - what functionality or keyboard character to use in form of codes from
# 	functionality_codes and key_codes files,
#
# - whether functionality or keyboard character is up or down 
# 	(down when key or functionality is pressed, up when key or functionality is released),
#
# - delay to put after functionality or a keyboard character is done (in ms).
#
# Macro entry settings:
# - fun = functionality or a keyboard character code,
# - fun_up = 0 (press) or 1 (release),
# - delay = delay after functionality or a keyboard character.
#
# Example of a macro:
# press "A" key, delay 50ms, press "B" key, delay 40ms, release "B" key, delay 10ms,
# release "A" key, delay 1ms. Repeat it 302 times.
#
# macro = {
#	num_of_cycles = 302;
#	entries = (
#		{ fun = 0x04; fun_up = 0; delay = 50; },
#		{ fun = 0x05; fun_up = 0; delay = 40; },
#		{ fun = 0x05; fun_up = 1; delay = 10; },
#		{ fun = 0x04; fun_up = 1; delay = 1; }
#	);
# };
